.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.3
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTTP::Client 3"
.TH HTTP::Client 3 "2005-08-25" "perl v5.8.7" "User Contributed Perl Documentation"
.SH "NAME"
HTTP::Client \- Class for creating HTTP clients.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use HTTP::Client;
.Ve
.PP
.Vb 7
\&  my $client = HTTP::Client->new();
\&  my $site   = $client->get("http://www.cpan.org");
\&  my @headers = $client->response_headers;
\&  my $agent   = $client->agent;
\&  print $agent . "\en";
\&  print $headers[$_] . "\en" foreach (0..$#headers);
\&  print $site;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
HTTP::Client is a class for creating
clients, that does not require
\&\s-1LWP\s0. It is aimed at speed.
It can send \s-1HTTP\s0 Request headers,
get \s-1HTTP\s0 response headers and get documents.
.SH "METHODS"
.IX Header "METHODS"
.IP "new" 3
.IX Item "new"
this is the constructor
for HTTP::Client.
It can be called like this:
.Sp
.Vb 1
\&   my $client = HTTP::Client->new;
.Ve
.Sp
or this:
.Sp
.Vb 1
\&   my $client = new HTTP::Client ();
.Ve
.Sp
it can take the useragent string as
an argument like this:
.Sp
.Vb 1
\&   my $client = HTTP::Client->new("Bot/1.0");
.Ve
.Sp
If the useragent is supplied in
the constructor, but then supplied
in the \*(L"agent\*(R" method, the
constructor will be authoritative.
In other words, you can only override
the already specified client
name by using only \*(L"agent\*(R" methods,
and not the constructor. (This is
actually a bug.)
.IP "$client\->get" 3
.IX Item "$client->get"
\&\fBget\fR gets a page on the web.
It can only do http pages for now.
The \s-1URI\s0 (\s-1URL\s0) to get is the only 
argument it takes. It returns
the body of the site if successful
(The \s-1HTTP\s0 status code is \*(L"200 \s-1OK\s0\*(R",
or the other \s-1HTTP\s0 status code
if it is not equal to that.
For example:
.Sp
.Vb 2
\&   my $site = $client->get("http://www.cpan.org");
\&   print $site . "\en";
.Ve
.Sp
prints the source of cpan.org or the status code if 
it could not find it. It will append a trailing 
slash to the \s-1URL\s0 if it doesn't end in one.
.IP "$client\->response_headers" 3
.IX Item "$client->response_headers"
\&\fBresponse_headers\fR returns an array
of all the response headers sent by the 
server. Currently, to loop
through the array, you must
use this construct:
.Sp
.Vb 5
\& my $site = $client->get("http://www.cpan.org");
\& my @headers = $client->response_headers;
\& foreach (0..$#headers) {
\&    print $headers[$_] . "\en";
\& }
.Ve
.Sp
this is a big bug.
.IP "$client\->agent" 3
.IX Item "$client->agent"
\&\fBagent\fR sets th current User-Agent
header, thus renaming the current
client. If the agent was specified in
the constructor, even using this
method will not override the
one specified in the constructor.
So, you can only override your
useragent with multiple
\&\fIagent()\fRs, not with the
constructor and then \fIagent()\fRs.
For example:
.Sp
.Vb 3
\& my $client = HTTP::Client->new("Bot/1.0");
\& my $site = $client->get("http://www.cpan.org");
\& $client->agent("NewBot/1.0"); #Wrong! agent is still "Bot/1.0"
.Ve
.Sp
is wrong but this:
.Sp
.Vb 4
\& my $client = HTTP::Client->new;
\& my $site = $client->get("http://www.cpan.org");
\& $client->agent("NewBot/1.0"); #Right! useragent is NewBot/1.0!
\& $client->agent("NewNewBot/1.0"); #Right! useragent is now NewNewBot/1.0!
.Ve
.Sp
is right and changes the useragent after the second
call.
.IP "$client\->from" 3
.IX Item "$client->from"
\&\fBfrom\fR sets the From header, which should
be an email address of the person/machine that
is sending the request. If the from was
specified in the constructor, just like the
agent method, using this method will
not override the setting in the constructor.
Therefore, you can only override from headers
by using multiple \fIfrom()\fR methods, not
by using the constructor and then from methods.
For example:
.Sp
.Vb 3
\& my $client = HTTP::Client->new("Bot/1.1", "nightcat\e@crocker.com");
\& my $site = $client->get("http://www.cpan.org");
\& $client->from("au\e@th.or"); #Wrong! From is still nightcat@crocker.com!
.Ve
.Sp
doesn't work, but this:
.Sp
.Vb 4
\& my $client = HTTP::Client->new;
\& my $site = $client->get("http://www.cpan.org");
\& $client->from("nightcat\e@crocker.com"); #Right! From is nightcat@crocker.com!
\& $client->from("au\e@th.or"); #Right! From is now au@th.or!
.Ve
.Sp
does. Note that you have to escape the at sign (@) in the
address if you are using double quotes, because otherwise
it will be interpreted as an array.
.IP "$client\->status_message" 3
.IX Item "$client->status_message"
\&\fBstatus_message\fR returns the \s-1HTTP\s0 status message
sent by the server. It returns it in the
full form, e.g. \*(L"200 \s-1OK\s0\*(R" or \*(L"404 Not Found\*(R".
For example:
.Sp
.Vb 2
\& my $site = $client->get("http://www.cpan.org");
\& print $client->status_message;
.Ve
.Sp
prints \*(L"200 \s-1OK\s0\*(R". Note that
if here, and anywhere else
when getting a site,
if a bad hostname is supplies,
the program will die with the error
\&\*(L"Can't get (url to get); may be a result of a bad hostname: (error message in $!)\*(R"
.IP "$client\->server" 3
.IX Item "$client->server"
returns the value of the Server header sent by the server.
.IP "$client\->content_type" 3
.IX Item "$client->content_type"
returns the Content-Type header sent by the server.
.IP "$client\->last_modified" 3
.IX Item "$client->last_modified"
returns the Last-Modified header sent by the server.
.IP "$client\->protocol" 3
.IX Item "$client->protocol"
returns the protocol sent by the server. (Usually something like
\&\*(L"\s-1HTTP/1\s0.1\*(R"
.IP "$client\->content_encoding" 3
.IX Item "$client->content_encoding"
returns the Content-Encoding header sent by the server.
.IP "$client\->content_length" 3
.IX Item "$client->content_length"
returns the Content-Length header sent by the server.
.IP "$client\->warning" 3
.IX Item "$client->warning"
returns the Warning header sent be the server.
.IP "$client\->title" 3
.IX Item "$client->title"
returns the Title header sent by the server.
Note: \fIThis is no longer part of the \s-1HTTP\s0 specification.\fR
.SH "EXAMPLE"
.IX Header "EXAMPLE"
a real world example for getting documents would be:
.PP
.Vb 10
\& use HTTP::Client;
\& my $client = HTTP::Client->new("GetBot/1.0", "nightcat\e@crocker.com");
\& my $url = shift || <STDIN>;
\& my $site = $client->get($url) or die $client->status_message;
\& print "\en" . $client->agent . "got $url successfully.";
\& print "\en\enHeaders Recieved:\en";
\& my @headers = response_headers;
\& print "$headers[$_]" foreach (0..$#headers);
\& print "\en\en";
\& print $site . "\en\en";
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
HTTP::Lite, LWP::UserAgent
.SH "AUTHOR"
.IX Header "AUTHOR"
Nightcat, <nightcat@crocker.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2005 by <nightcat>
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.6 or,
at your option, any later version of Perl 5 you may have available.
